package com.mycat.advisor.entity.mbg;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class DubboInvokeExample extends BaseExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table dubbo_invoke
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table dubbo_invoke
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table dubbo_invoke
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table dubbo_invoke
     *
     * @mbggenerated
     */
    public DubboInvokeExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table dubbo_invoke
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table dubbo_invoke
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table dubbo_invoke
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table dubbo_invoke
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table dubbo_invoke
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table dubbo_invoke
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table dubbo_invoke
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table dubbo_invoke
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table dubbo_invoke
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table dubbo_invoke
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table dubbo_invoke
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(String value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(String value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(String value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(String value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(String value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(String value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLike(String value) {
            addCriterion("id like", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotLike(String value) {
            addCriterion("id not like", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<String> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<String> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(String value1, String value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(String value1, String value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andInvokeDateIsNull() {
            addCriterion("invoke_date is null");
            return (Criteria) this;
        }

        public Criteria andInvokeDateIsNotNull() {
            addCriterion("invoke_date is not null");
            return (Criteria) this;
        }

        public Criteria andInvokeDateEqualTo(Date value) {
            addCriterionForJDBCDate("invoke_date =", value, "invokeDate");
            return (Criteria) this;
        }

        public Criteria andInvokeDateNotEqualTo(Date value) {
            addCriterionForJDBCDate("invoke_date <>", value, "invokeDate");
            return (Criteria) this;
        }

        public Criteria andInvokeDateGreaterThan(Date value) {
            addCriterionForJDBCDate("invoke_date >", value, "invokeDate");
            return (Criteria) this;
        }

        public Criteria andInvokeDateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("invoke_date >=", value, "invokeDate");
            return (Criteria) this;
        }

        public Criteria andInvokeDateLessThan(Date value) {
            addCriterionForJDBCDate("invoke_date <", value, "invokeDate");
            return (Criteria) this;
        }

        public Criteria andInvokeDateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("invoke_date <=", value, "invokeDate");
            return (Criteria) this;
        }

        public Criteria andInvokeDateIn(List<Date> values) {
            addCriterionForJDBCDate("invoke_date in", values, "invokeDate");
            return (Criteria) this;
        }

        public Criteria andInvokeDateNotIn(List<Date> values) {
            addCriterionForJDBCDate("invoke_date not in", values, "invokeDate");
            return (Criteria) this;
        }

        public Criteria andInvokeDateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("invoke_date between", value1, value2, "invokeDate");
            return (Criteria) this;
        }

        public Criteria andInvokeDateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("invoke_date not between", value1, value2, "invokeDate");
            return (Criteria) this;
        }

        public Criteria andServiceIsNull() {
            addCriterion("service is null");
            return (Criteria) this;
        }

        public Criteria andServiceIsNotNull() {
            addCriterion("service is not null");
            return (Criteria) this;
        }

        public Criteria andServiceEqualTo(String value) {
            addCriterion("service =", value, "service");
            return (Criteria) this;
        }

        public Criteria andServiceNotEqualTo(String value) {
            addCriterion("service <>", value, "service");
            return (Criteria) this;
        }

        public Criteria andServiceGreaterThan(String value) {
            addCriterion("service >", value, "service");
            return (Criteria) this;
        }

        public Criteria andServiceGreaterThanOrEqualTo(String value) {
            addCriterion("service >=", value, "service");
            return (Criteria) this;
        }

        public Criteria andServiceLessThan(String value) {
            addCriterion("service <", value, "service");
            return (Criteria) this;
        }

        public Criteria andServiceLessThanOrEqualTo(String value) {
            addCriterion("service <=", value, "service");
            return (Criteria) this;
        }

        public Criteria andServiceLike(String value) {
            addCriterion("service like", value, "service");
            return (Criteria) this;
        }

        public Criteria andServiceNotLike(String value) {
            addCriterion("service not like", value, "service");
            return (Criteria) this;
        }

        public Criteria andServiceIn(List<String> values) {
            addCriterion("service in", values, "service");
            return (Criteria) this;
        }

        public Criteria andServiceNotIn(List<String> values) {
            addCriterion("service not in", values, "service");
            return (Criteria) this;
        }

        public Criteria andServiceBetween(String value1, String value2) {
            addCriterion("service between", value1, value2, "service");
            return (Criteria) this;
        }

        public Criteria andServiceNotBetween(String value1, String value2) {
            addCriterion("service not between", value1, value2, "service");
            return (Criteria) this;
        }

        public Criteria andMethodIsNull() {
            addCriterion("method is null");
            return (Criteria) this;
        }

        public Criteria andMethodIsNotNull() {
            addCriterion("method is not null");
            return (Criteria) this;
        }

        public Criteria andMethodEqualTo(String value) {
            addCriterion("method =", value, "method");
            return (Criteria) this;
        }

        public Criteria andMethodNotEqualTo(String value) {
            addCriterion("method <>", value, "method");
            return (Criteria) this;
        }

        public Criteria andMethodGreaterThan(String value) {
            addCriterion("method >", value, "method");
            return (Criteria) this;
        }

        public Criteria andMethodGreaterThanOrEqualTo(String value) {
            addCriterion("method >=", value, "method");
            return (Criteria) this;
        }

        public Criteria andMethodLessThan(String value) {
            addCriterion("method <", value, "method");
            return (Criteria) this;
        }

        public Criteria andMethodLessThanOrEqualTo(String value) {
            addCriterion("method <=", value, "method");
            return (Criteria) this;
        }

        public Criteria andMethodLike(String value) {
            addCriterion("method like", value, "method");
            return (Criteria) this;
        }

        public Criteria andMethodNotLike(String value) {
            addCriterion("method not like", value, "method");
            return (Criteria) this;
        }

        public Criteria andMethodIn(List<String> values) {
            addCriterion("method in", values, "method");
            return (Criteria) this;
        }

        public Criteria andMethodNotIn(List<String> values) {
            addCriterion("method not in", values, "method");
            return (Criteria) this;
        }

        public Criteria andMethodBetween(String value1, String value2) {
            addCriterion("method between", value1, value2, "method");
            return (Criteria) this;
        }

        public Criteria andMethodNotBetween(String value1, String value2) {
            addCriterion("method not between", value1, value2, "method");
            return (Criteria) this;
        }

        public Criteria andConsumerIsNull() {
            addCriterion("consumer is null");
            return (Criteria) this;
        }

        public Criteria andConsumerIsNotNull() {
            addCriterion("consumer is not null");
            return (Criteria) this;
        }

        public Criteria andConsumerEqualTo(String value) {
            addCriterion("consumer =", value, "consumer");
            return (Criteria) this;
        }

        public Criteria andConsumerNotEqualTo(String value) {
            addCriterion("consumer <>", value, "consumer");
            return (Criteria) this;
        }

        public Criteria andConsumerGreaterThan(String value) {
            addCriterion("consumer >", value, "consumer");
            return (Criteria) this;
        }

        public Criteria andConsumerGreaterThanOrEqualTo(String value) {
            addCriterion("consumer >=", value, "consumer");
            return (Criteria) this;
        }

        public Criteria andConsumerLessThan(String value) {
            addCriterion("consumer <", value, "consumer");
            return (Criteria) this;
        }

        public Criteria andConsumerLessThanOrEqualTo(String value) {
            addCriterion("consumer <=", value, "consumer");
            return (Criteria) this;
        }

        public Criteria andConsumerLike(String value) {
            addCriterion("consumer like", value, "consumer");
            return (Criteria) this;
        }

        public Criteria andConsumerNotLike(String value) {
            addCriterion("consumer not like", value, "consumer");
            return (Criteria) this;
        }

        public Criteria andConsumerIn(List<String> values) {
            addCriterion("consumer in", values, "consumer");
            return (Criteria) this;
        }

        public Criteria andConsumerNotIn(List<String> values) {
            addCriterion("consumer not in", values, "consumer");
            return (Criteria) this;
        }

        public Criteria andConsumerBetween(String value1, String value2) {
            addCriterion("consumer between", value1, value2, "consumer");
            return (Criteria) this;
        }

        public Criteria andConsumerNotBetween(String value1, String value2) {
            addCriterion("consumer not between", value1, value2, "consumer");
            return (Criteria) this;
        }

        public Criteria andProviderIsNull() {
            addCriterion("provider is null");
            return (Criteria) this;
        }

        public Criteria andProviderIsNotNull() {
            addCriterion("provider is not null");
            return (Criteria) this;
        }

        public Criteria andProviderEqualTo(String value) {
            addCriterion("provider =", value, "provider");
            return (Criteria) this;
        }

        public Criteria andProviderNotEqualTo(String value) {
            addCriterion("provider <>", value, "provider");
            return (Criteria) this;
        }

        public Criteria andProviderGreaterThan(String value) {
            addCriterion("provider >", value, "provider");
            return (Criteria) this;
        }

        public Criteria andProviderGreaterThanOrEqualTo(String value) {
            addCriterion("provider >=", value, "provider");
            return (Criteria) this;
        }

        public Criteria andProviderLessThan(String value) {
            addCriterion("provider <", value, "provider");
            return (Criteria) this;
        }

        public Criteria andProviderLessThanOrEqualTo(String value) {
            addCriterion("provider <=", value, "provider");
            return (Criteria) this;
        }

        public Criteria andProviderLike(String value) {
            addCriterion("provider like", value, "provider");
            return (Criteria) this;
        }

        public Criteria andProviderNotLike(String value) {
            addCriterion("provider not like", value, "provider");
            return (Criteria) this;
        }

        public Criteria andProviderIn(List<String> values) {
            addCriterion("provider in", values, "provider");
            return (Criteria) this;
        }

        public Criteria andProviderNotIn(List<String> values) {
            addCriterion("provider not in", values, "provider");
            return (Criteria) this;
        }

        public Criteria andProviderBetween(String value1, String value2) {
            addCriterion("provider between", value1, value2, "provider");
            return (Criteria) this;
        }

        public Criteria andProviderNotBetween(String value1, String value2) {
            addCriterion("provider not between", value1, value2, "provider");
            return (Criteria) this;
        }

        public Criteria andTypeIsNull() {
            addCriterion("type is null");
            return (Criteria) this;
        }

        public Criteria andTypeIsNotNull() {
            addCriterion("type is not null");
            return (Criteria) this;
        }

        public Criteria andTypeEqualTo(String value) {
            addCriterion("type =", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeNotEqualTo(String value) {
            addCriterion("type <>", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeGreaterThan(String value) {
            addCriterion("type >", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeGreaterThanOrEqualTo(String value) {
            addCriterion("type >=", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeLessThan(String value) {
            addCriterion("type <", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeLessThanOrEqualTo(String value) {
            addCriterion("type <=", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeLike(String value) {
            addCriterion("type like", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeNotLike(String value) {
            addCriterion("type not like", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeIn(List<String> values) {
            addCriterion("type in", values, "type");
            return (Criteria) this;
        }

        public Criteria andTypeNotIn(List<String> values) {
            addCriterion("type not in", values, "type");
            return (Criteria) this;
        }

        public Criteria andTypeBetween(String value1, String value2) {
            addCriterion("type between", value1, value2, "type");
            return (Criteria) this;
        }

        public Criteria andTypeNotBetween(String value1, String value2) {
            addCriterion("type not between", value1, value2, "type");
            return (Criteria) this;
        }

        public Criteria andInvokeTimeIsNull() {
            addCriterion("invoke_time is null");
            return (Criteria) this;
        }

        public Criteria andInvokeTimeIsNotNull() {
            addCriterion("invoke_time is not null");
            return (Criteria) this;
        }

        public Criteria andInvokeTimeEqualTo(Long value) {
            addCriterion("invoke_time =", value, "invokeTime");
            return (Criteria) this;
        }

        public Criteria andInvokeTimeNotEqualTo(Long value) {
            addCriterion("invoke_time <>", value, "invokeTime");
            return (Criteria) this;
        }

        public Criteria andInvokeTimeGreaterThan(Long value) {
            addCriterion("invoke_time >", value, "invokeTime");
            return (Criteria) this;
        }

        public Criteria andInvokeTimeGreaterThanOrEqualTo(Long value) {
            addCriterion("invoke_time >=", value, "invokeTime");
            return (Criteria) this;
        }

        public Criteria andInvokeTimeLessThan(Long value) {
            addCriterion("invoke_time <", value, "invokeTime");
            return (Criteria) this;
        }

        public Criteria andInvokeTimeLessThanOrEqualTo(Long value) {
            addCriterion("invoke_time <=", value, "invokeTime");
            return (Criteria) this;
        }

        public Criteria andInvokeTimeIn(List<Long> values) {
            addCriterion("invoke_time in", values, "invokeTime");
            return (Criteria) this;
        }

        public Criteria andInvokeTimeNotIn(List<Long> values) {
            addCriterion("invoke_time not in", values, "invokeTime");
            return (Criteria) this;
        }

        public Criteria andInvokeTimeBetween(Long value1, Long value2) {
            addCriterion("invoke_time between", value1, value2, "invokeTime");
            return (Criteria) this;
        }

        public Criteria andInvokeTimeNotBetween(Long value1, Long value2) {
            addCriterion("invoke_time not between", value1, value2, "invokeTime");
            return (Criteria) this;
        }

        public Criteria andSuccessIsNull() {
            addCriterion("success is null");
            return (Criteria) this;
        }

        public Criteria andSuccessIsNotNull() {
            addCriterion("success is not null");
            return (Criteria) this;
        }

        public Criteria andSuccessEqualTo(Integer value) {
            addCriterion("success =", value, "success");
            return (Criteria) this;
        }

        public Criteria andSuccessNotEqualTo(Integer value) {
            addCriterion("success <>", value, "success");
            return (Criteria) this;
        }

        public Criteria andSuccessGreaterThan(Integer value) {
            addCriterion("success >", value, "success");
            return (Criteria) this;
        }

        public Criteria andSuccessGreaterThanOrEqualTo(Integer value) {
            addCriterion("success >=", value, "success");
            return (Criteria) this;
        }

        public Criteria andSuccessLessThan(Integer value) {
            addCriterion("success <", value, "success");
            return (Criteria) this;
        }

        public Criteria andSuccessLessThanOrEqualTo(Integer value) {
            addCriterion("success <=", value, "success");
            return (Criteria) this;
        }

        public Criteria andSuccessIn(List<Integer> values) {
            addCriterion("success in", values, "success");
            return (Criteria) this;
        }

        public Criteria andSuccessNotIn(List<Integer> values) {
            addCriterion("success not in", values, "success");
            return (Criteria) this;
        }

        public Criteria andSuccessBetween(Integer value1, Integer value2) {
            addCriterion("success between", value1, value2, "success");
            return (Criteria) this;
        }

        public Criteria andSuccessNotBetween(Integer value1, Integer value2) {
            addCriterion("success not between", value1, value2, "success");
            return (Criteria) this;
        }

        public Criteria andFailureIsNull() {
            addCriterion("failure is null");
            return (Criteria) this;
        }

        public Criteria andFailureIsNotNull() {
            addCriterion("failure is not null");
            return (Criteria) this;
        }

        public Criteria andFailureEqualTo(Integer value) {
            addCriterion("failure =", value, "failure");
            return (Criteria) this;
        }

        public Criteria andFailureNotEqualTo(Integer value) {
            addCriterion("failure <>", value, "failure");
            return (Criteria) this;
        }

        public Criteria andFailureGreaterThan(Integer value) {
            addCriterion("failure >", value, "failure");
            return (Criteria) this;
        }

        public Criteria andFailureGreaterThanOrEqualTo(Integer value) {
            addCriterion("failure >=", value, "failure");
            return (Criteria) this;
        }

        public Criteria andFailureLessThan(Integer value) {
            addCriterion("failure <", value, "failure");
            return (Criteria) this;
        }

        public Criteria andFailureLessThanOrEqualTo(Integer value) {
            addCriterion("failure <=", value, "failure");
            return (Criteria) this;
        }

        public Criteria andFailureIn(List<Integer> values) {
            addCriterion("failure in", values, "failure");
            return (Criteria) this;
        }

        public Criteria andFailureNotIn(List<Integer> values) {
            addCriterion("failure not in", values, "failure");
            return (Criteria) this;
        }

        public Criteria andFailureBetween(Integer value1, Integer value2) {
            addCriterion("failure between", value1, value2, "failure");
            return (Criteria) this;
        }

        public Criteria andFailureNotBetween(Integer value1, Integer value2) {
            addCriterion("failure not between", value1, value2, "failure");
            return (Criteria) this;
        }

        public Criteria andElapsedIsNull() {
            addCriterion("elapsed is null");
            return (Criteria) this;
        }

        public Criteria andElapsedIsNotNull() {
            addCriterion("elapsed is not null");
            return (Criteria) this;
        }

        public Criteria andElapsedEqualTo(Integer value) {
            addCriterion("elapsed =", value, "elapsed");
            return (Criteria) this;
        }

        public Criteria andElapsedNotEqualTo(Integer value) {
            addCriterion("elapsed <>", value, "elapsed");
            return (Criteria) this;
        }

        public Criteria andElapsedGreaterThan(Integer value) {
            addCriterion("elapsed >", value, "elapsed");
            return (Criteria) this;
        }

        public Criteria andElapsedGreaterThanOrEqualTo(Integer value) {
            addCriterion("elapsed >=", value, "elapsed");
            return (Criteria) this;
        }

        public Criteria andElapsedLessThan(Integer value) {
            addCriterion("elapsed <", value, "elapsed");
            return (Criteria) this;
        }

        public Criteria andElapsedLessThanOrEqualTo(Integer value) {
            addCriterion("elapsed <=", value, "elapsed");
            return (Criteria) this;
        }

        public Criteria andElapsedIn(List<Integer> values) {
            addCriterion("elapsed in", values, "elapsed");
            return (Criteria) this;
        }

        public Criteria andElapsedNotIn(List<Integer> values) {
            addCriterion("elapsed not in", values, "elapsed");
            return (Criteria) this;
        }

        public Criteria andElapsedBetween(Integer value1, Integer value2) {
            addCriterion("elapsed between", value1, value2, "elapsed");
            return (Criteria) this;
        }

        public Criteria andElapsedNotBetween(Integer value1, Integer value2) {
            addCriterion("elapsed not between", value1, value2, "elapsed");
            return (Criteria) this;
        }

        public Criteria andConcurrentIsNull() {
            addCriterion("concurrent is null");
            return (Criteria) this;
        }

        public Criteria andConcurrentIsNotNull() {
            addCriterion("concurrent is not null");
            return (Criteria) this;
        }

        public Criteria andConcurrentEqualTo(Integer value) {
            addCriterion("concurrent =", value, "concurrent");
            return (Criteria) this;
        }

        public Criteria andConcurrentNotEqualTo(Integer value) {
            addCriterion("concurrent <>", value, "concurrent");
            return (Criteria) this;
        }

        public Criteria andConcurrentGreaterThan(Integer value) {
            addCriterion("concurrent >", value, "concurrent");
            return (Criteria) this;
        }

        public Criteria andConcurrentGreaterThanOrEqualTo(Integer value) {
            addCriterion("concurrent >=", value, "concurrent");
            return (Criteria) this;
        }

        public Criteria andConcurrentLessThan(Integer value) {
            addCriterion("concurrent <", value, "concurrent");
            return (Criteria) this;
        }

        public Criteria andConcurrentLessThanOrEqualTo(Integer value) {
            addCriterion("concurrent <=", value, "concurrent");
            return (Criteria) this;
        }

        public Criteria andConcurrentIn(List<Integer> values) {
            addCriterion("concurrent in", values, "concurrent");
            return (Criteria) this;
        }

        public Criteria andConcurrentNotIn(List<Integer> values) {
            addCriterion("concurrent not in", values, "concurrent");
            return (Criteria) this;
        }

        public Criteria andConcurrentBetween(Integer value1, Integer value2) {
            addCriterion("concurrent between", value1, value2, "concurrent");
            return (Criteria) this;
        }

        public Criteria andConcurrentNotBetween(Integer value1, Integer value2) {
            addCriterion("concurrent not between", value1, value2, "concurrent");
            return (Criteria) this;
        }

        public Criteria andMaxElapsedIsNull() {
            addCriterion("max_elapsed is null");
            return (Criteria) this;
        }

        public Criteria andMaxElapsedIsNotNull() {
            addCriterion("max_elapsed is not null");
            return (Criteria) this;
        }

        public Criteria andMaxElapsedEqualTo(Integer value) {
            addCriterion("max_elapsed =", value, "maxElapsed");
            return (Criteria) this;
        }

        public Criteria andMaxElapsedNotEqualTo(Integer value) {
            addCriterion("max_elapsed <>", value, "maxElapsed");
            return (Criteria) this;
        }

        public Criteria andMaxElapsedGreaterThan(Integer value) {
            addCriterion("max_elapsed >", value, "maxElapsed");
            return (Criteria) this;
        }

        public Criteria andMaxElapsedGreaterThanOrEqualTo(Integer value) {
            addCriterion("max_elapsed >=", value, "maxElapsed");
            return (Criteria) this;
        }

        public Criteria andMaxElapsedLessThan(Integer value) {
            addCriterion("max_elapsed <", value, "maxElapsed");
            return (Criteria) this;
        }

        public Criteria andMaxElapsedLessThanOrEqualTo(Integer value) {
            addCriterion("max_elapsed <=", value, "maxElapsed");
            return (Criteria) this;
        }

        public Criteria andMaxElapsedIn(List<Integer> values) {
            addCriterion("max_elapsed in", values, "maxElapsed");
            return (Criteria) this;
        }

        public Criteria andMaxElapsedNotIn(List<Integer> values) {
            addCriterion("max_elapsed not in", values, "maxElapsed");
            return (Criteria) this;
        }

        public Criteria andMaxElapsedBetween(Integer value1, Integer value2) {
            addCriterion("max_elapsed between", value1, value2, "maxElapsed");
            return (Criteria) this;
        }

        public Criteria andMaxElapsedNotBetween(Integer value1, Integer value2) {
            addCriterion("max_elapsed not between", value1, value2, "maxElapsed");
            return (Criteria) this;
        }

        public Criteria andMaxConcurrentIsNull() {
            addCriterion("max_concurrent is null");
            return (Criteria) this;
        }

        public Criteria andMaxConcurrentIsNotNull() {
            addCriterion("max_concurrent is not null");
            return (Criteria) this;
        }

        public Criteria andMaxConcurrentEqualTo(Integer value) {
            addCriterion("max_concurrent =", value, "maxConcurrent");
            return (Criteria) this;
        }

        public Criteria andMaxConcurrentNotEqualTo(Integer value) {
            addCriterion("max_concurrent <>", value, "maxConcurrent");
            return (Criteria) this;
        }

        public Criteria andMaxConcurrentGreaterThan(Integer value) {
            addCriterion("max_concurrent >", value, "maxConcurrent");
            return (Criteria) this;
        }

        public Criteria andMaxConcurrentGreaterThanOrEqualTo(Integer value) {
            addCriterion("max_concurrent >=", value, "maxConcurrent");
            return (Criteria) this;
        }

        public Criteria andMaxConcurrentLessThan(Integer value) {
            addCriterion("max_concurrent <", value, "maxConcurrent");
            return (Criteria) this;
        }

        public Criteria andMaxConcurrentLessThanOrEqualTo(Integer value) {
            addCriterion("max_concurrent <=", value, "maxConcurrent");
            return (Criteria) this;
        }

        public Criteria andMaxConcurrentIn(List<Integer> values) {
            addCriterion("max_concurrent in", values, "maxConcurrent");
            return (Criteria) this;
        }

        public Criteria andMaxConcurrentNotIn(List<Integer> values) {
            addCriterion("max_concurrent not in", values, "maxConcurrent");
            return (Criteria) this;
        }

        public Criteria andMaxConcurrentBetween(Integer value1, Integer value2) {
            addCriterion("max_concurrent between", value1, value2, "maxConcurrent");
            return (Criteria) this;
        }

        public Criteria andMaxConcurrentNotBetween(Integer value1, Integer value2) {
            addCriterion("max_concurrent not between", value1, value2, "maxConcurrent");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table dubbo_invoke
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table dubbo_invoke
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}